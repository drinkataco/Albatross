{"version":3,"sources":["webpack:///webpack/bootstrap 98f8137eb177bf0bb438","webpack:///./node_modules/AdminLite/build/js/src/Utilities.js","webpack:///./node_modules/AdminLite/build/js/src/Tree.js","webpack:///./albatross.js","webpack:///./node_modules/AdminLite/build/js/main.js","webpack:///./node_modules/AdminLite/build/js/src/BoxRefresh.js","webpack:///./node_modules/AdminLite/build/js/src/BoxWidget.js","webpack:///./node_modules/AdminLite/build/js/src/ControlSidebar.js","webpack:///./node_modules/AdminLite/build/js/src/DirectChat.js","webpack:///./node_modules/AdminLite/build/js/src/Layout.js","webpack:///./node_modules/AdminLite/build/js/src/PushMenu.js","webpack:///./node_modules/AdminLite/build/js/src/TodoList.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,aAAa;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,YAAY,qBAAqB;AACjC,YAAY,0BAA0B;AACtC,YAAY,YAAY;AACxB,YAAY,kBAAkB;AAC9B,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB,0BAA0B;AAC3C;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;;;;;;;ACzEA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,YAAY;AACzB,aAAa,YAAY;AACzB,aAAa,YAAY;AACzB,aAAa,YAAY;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA,8BAA8B;AAC9B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;AClNA;;;;;;;;;;;;;;;;;;;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;ACjCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,YAAY;AACzB,aAAa,YAAY;AACzB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO,EAAE,MAAM,GAAG,2BAA2B;AACjE;AACA,OAAO;AACP;;AAEA;AACA;AACA,8BAA8B,oBAAoB,EAAE,OAAO;;AAE3D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,YAAY;AACZ,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,WAAW,EAAE;AAClD;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AClMA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,YAAY;AACzB,aAAa,YAAY;AACzB,aAAa,YAAY;AACzB,aAAa,YAAY;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4DAA4D,0BAA0B;;AAEtF;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4DAA4D,wBAAwB;;AAEpF;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;ACjQA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,YAAY;AACzB,aAAa,YAAY;AACzB,aAAa,YAAY;AACzB,aAAa,YAAY;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACjKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,YAAY;AACzB,aAAa,YAAY;AACzB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;;;;;;;;;;AChFA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,YAAY;AACzB,aAAa,YAAY;AACzB,aAAa,YAAY;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mDAAmD,0BAA0B,KAAK,sBAAsB;AACxG;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,qCAAqC,4BAA4B;AACjE,KAAK;AACL;AACA;AACA;AACA,uCAAuC,cAAc;AACrD,OAAO;AACP;AACA,uCAAuC,cAAc;AACrD;;AAEA;AACA;AACA;AACA;AACA,yCAAyC,4BAA4B;AACrE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gCAAgC,4BAA4B;AAC5D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;AC/MA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,YAAY;AACzB,aAAa,YAAY;AACzB,aAAa,YAAY;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;ACjOA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,YAAY;AACzB,aAAa,YAAY;AACzB,aAAa,YAAY;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA","file":"albatross.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 98f8137eb177bf0bb438","/**\n * Utilities\n *\n * @author Josh Walwyn <me@joshwalwyn.com>\n *\n * @type {Object}\n */\nconst Utilities = {};\n\n/**\n * Finds children of element\n * @param {String} nodeType   Required node type, such as LI, DIV\n * @param {String} className  Name of class to grab\n * @param {Object} parentNode Node of who's children to traverse through\n * @return {List<Object>}      List of found elements\n */\nUtilities.findChildren = (nodeType, className, parentNode) => {\n  const found = [];\n  let child = parentNode.firstChild;\n  while (child) {\n    if (child.nodeName === nodeType &&\n        child.classList.contains(className)) {\n      found.push(child);\n    }\n    child = child.nextSibling;\n  }\n\n  return found;\n};\n\n/**\n * Build options array from element set and defaults\n * @param  {Array<String, Mixed>}      default Default Options for fallback\n * @param  {Array<String, Mixed>|null} current Current Objects\n * @param  {Object|null}               element DOM Element to traverse for data attrs for options\n * @param  {List<String>|null}         fields  List of fields to resolve for options\n * @return {Object}                            Calculated Options\n */\nUtilities.grabOptions = (def, current, element, fields) => {\n  // Keep all option variations here\n  const options = {};\n  options.default = def;\n  options.current = current || {};\n  options.calculated = {};\n\n  // Get FieldNames\n  const fieldsToFetch = fields || Object.keys(def);\n\n  // Loop through fields to get option match\n  for (let i = 0; i < fieldsToFetch.length; i += 1) {\n    const fieldName = fieldsToFetch[i];\n    let value;\n\n    // If field has already been defined, don't change selection\n    if (fieldName in options.current) {\n      value = options.current[fieldName];\n    // Otherwise attempt to find it in the dataset\n    } else if (element && fieldName in element.dataset) {\n      value = element.dataset[fieldName];\n    // Otherwise, let's just go with the default value\n    } else {\n      value = options.default[fieldName];\n    }\n\n    // convert false boolean\n    value = (value === 'false') ? false : value;\n\n    options.calculated[fieldName] = value;\n  }\n\n  return options.calculated;\n};\n\nexport default Utilities;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/AdminLite/build/js/src/Utilities.js\n// module id = 0\n// module chunks = 0 1","/* global Velocity */\nimport Utilities from './Utilities';\n\n/* Tree()\n * ======\n * Converts a nested list into a multilevel\n * tree view menu.\n *\n * @author Josh Walwyn <me@joshwalwyn.com>\n *\n * Adapted from Admin LTE Tree.js jQuery Plugin\n *\n * @Usage: new Tree(element, options)\n *         Add [data-widget=\"tree\"] to the ul element\n *         Pass any option as data-option-name=\"value\"\n */\nclass Tree {\n  /**\n   * Binds listeners onto sidebar elements\n   */\n  static bind() {\n    Array.prototype.forEach.call(\n      document.querySelectorAll(Tree.Selector.data),\n      element => new Tree(element),\n    );\n  }\n\n  /**\n   * Opens existing active element(s) and calls method to bind\n   * click event listeners onto the sidebar itself\n   * @param {Object} element The main sidebar element\n   * @param {Object|null} options list of options\n   * @param {Object|null} classNames list of classnames\n   * @param {Object|null} selectors list of dom selectors\n   * @param {Object|null} events list of event names\n   */\n  constructor(element, options, classNames, selectors, events) {\n    // Add parameters to global scope\n    this.Default = Tree.Default;\n    this.ClassName = classNames || Tree.ClassName;\n    this.Selector = selectors || Tree.Selector;\n    this.Event = events || Tree.Event;\n    this.element = element;\n    this.element.classList.add(this.ClassName.tree);\n\n    // Set options here\n    this.options = Utilities.grabOptions(this.Default, options, this.element);\n\n    // Open menu for active element\n    const active = this.element.querySelector(this.Selector.activeTreeview);\n\n    if (active !== null) {\n      active.classList.add(this.ClassName.open);\n    }\n\n    // bind listeners\n    this.setUpListeners();\n  }\n\n  /**\n   * Binds an event listener to each parent menu element\n   * @return {Object}\n   */\n  setUpListeners() {\n    // Binds a click event listener for each element\n    Array.prototype.forEach.call(\n      this.element.querySelectorAll(this.options.trigger),\n      (context) => {\n        context.addEventListener('click', (event) => {\n          this.toggle(context, event);\n        });\n      },\n    );\n  }\n\n  /**\n   * Handle show/hide of collapsible menus\n   * @param {Object} link  The link element clicked\n   * @param {Object} event The Triggered Event\n   */\n  toggle(link, event) {\n    // Get contextual DOM elements\n    const parentLi = link.parentNode;\n    const isOpen = parentLi.classList.contains(this.ClassName.open);\n    const treeviewMenu = Utilities.findChildren('UL', this.ClassName.treeviewMenu, parentLi);\n\n    // Stop if not a menu tree\n    if (!parentLi.classList.contains(this.ClassName.treeview)) {\n      return;\n    }\n\n    // Stop link follow\n    if (!this.options.followLink || link.getAttribute('href') === '#') {\n      event.preventDefault();\n    }\n\n    // Open or close depending on current statw\n    if (isOpen) {\n      this.collapse(treeviewMenu, parentLi);\n    } else {\n      this.expand(treeviewMenu, parentLi);\n    }\n  }\n\n  /**\n   * Collapse element\n   * @param {Object} tree     The child tree/menu\n   * @param {Object} parentLi The parent element that contains the tree\n   */\n  collapse(tree, parentLi) {\n    parentLi.classList.remove(this.ClassName.open);\n\n    const treeLocal = tree;\n\n    Array.prototype.forEach.call(treeLocal, (t) => {\n      const treeItem = t;\n      if (typeof Velocity === 'undefined') {\n        treeItem.style.display = 'none';\n        this.element.dispatchEvent(new CustomEvent(this.Event.collapsed));\n      } else {\n        Velocity(treeItem, 'slideUp', {\n          easing: this.options.easing,\n          duration: this.options.animationSpeed,\n        }).then(() => {\n          // Call custom event to indicate collapse\n          this.element.dispatchEvent(new CustomEvent(this.Event.collapsed));\n        });\n      }\n    });\n  }\n\n  /**\n   * Expand menu selection, and close all siblings\n   * @param {Object} tree     The child tree/menu\n   * @param {Object} parentLi The parent element that contains the tree\n   */\n  expand(tree, parentLi) {\n    // We need to access direct siblings to support multilevel menus remaining open\n    const openMenus = Utilities.findChildren('LI', this.ClassName.open, parentLi.parentNode);\n\n    // For each currently opened menu (which should be just 1) we should close\n    if (this.options.accordion) {\n      Array.prototype.forEach.call(openMenus, (menu) => {\n        const openTree = Utilities.findChildren('UL', this.ClassName.treeviewMenu, menu);\n\n        // Collapse\n        this.collapse(openTree, menu);\n      });\n    }\n\n    // Open this menu\n    parentLi.classList.add(this.ClassName.open);\n\n    const firstTree = tree[0]; // Only the direct descendant needs to be closed\n    if (typeof Velocity === 'undefined') {\n      firstTree.style.display = 'block';\n      this.element.dispatchEvent(new CustomEvent(this.Event.expanded));\n    } else {\n      Velocity(firstTree, 'slideDown', {\n        easing: this.options.easing,\n        duration: this.options.animationSpeed,\n      }).then(() => {\n        // Call custom event to indicate expansion\n        this.element.dispatchEvent(new CustomEvent(this.Event.expanded));\n      });\n    }\n  }\n}\n\n/**\n * Default Options\n * @type {Object}\n */\nTree.Default = {\n  animationSpeed: 300,\n  accordion: true,\n  followLink: true,\n  trigger: '.treeview a',\n  easing: 'easeInSine',\n};\n\n/**\n * Selectors for query selections\n * @type {Object}\n */\nTree.Selector = {\n  data: '[data-widget=\"tree\"]',\n  activeTreeview: '.treeview.active',\n};\n\n/**\n * DOM Class Names\n * @type {Object}\n */\nTree.ClassName = {\n  open: 'menu-open',\n  tree: 'tree',\n  treeview: 'treeview',\n  treeviewMenu: 'treeview-menu',\n};\n\n/**\n * Custom Events\n * @type {Object}\n */\nTree.Event = {\n  expanded: 'tree_expanded',\n  collapsed: 'tree_collapsed',\n};\n\nexport default Tree;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/AdminLite/build/js/src/Tree.js\n// module id = 1\n// module chunks = 0 1","import main from 'AdminLite/build/js/main'\n\n\n// WEBPACK FOOTER //\n// ./albatross.js","/*\n * JS\n */\nimport BoxRefresh from './src/BoxRefresh';\nimport BoxWidget from './src/BoxWidget';\nimport ControlSidebar from './src/ControlSidebar';\nimport DirectChat from './src/DirectChat';\nimport Layout from './src/Layout';\nimport PushMenu from './src/PushMenu';\nimport TodoList from './src/TodoList';\nimport Tree from './src/Tree';\n\n// Bind All\nconst binder = () => {\n  BoxRefresh.bind();\n  BoxWidget.bind();\n  ControlSidebar.bind();\n  DirectChat.bind();\n  Layout.bind();\n  PushMenu.bind();\n  TodoList.bind();\n  Tree.bind();\n};\n\nwindow.BoxRefresh = BoxRefresh;\nwindow.BoxWidget = BoxWidget;\nwindow.ControlSidebar = ControlSidebar;\nwindow.DirectChat = DirectChat;\nwindow.Layout = Layout;\nwindow.PushMenu = PushMenu;\nwindow.TodoList = TodoList;\nwindow.Tree = Tree;\n\ndocument.addEventListener('DOMContentLoaded', binder);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/AdminLite/build/js/main.js\n// module id = 3\n// module chunks = 0 1","import Utilities from './Utilities';\n\n/* BoxRefresh()\n * =========\n * Adds AJAX content control to a box.\n *\n * @author Josh Walwyn <me@joshwalwyn.com>\n *\n * Adapted from Admin LTE BoxRefresh.js jQuery Plugin\n *\n * @Usage: new BoxRefresh(element, options);\n *         or add [data-widget=\"box-refresh\"] to the box element\n *         Pass any option as data-option=\"value\"\n */\nclass BoxRefresh {\n  /**\n   * Binds listeners onto sidebar elements\n   */\n  static bind() {\n    Array.prototype.forEach.call(\n      document.querySelectorAll(BoxRefresh.Selector.data),\n      element => new BoxRefresh(element),\n    );\n  }\n\n  /**\n   * Binds Listeners to DOM\n   * @param {Object} element The main sidebar element\n   * @param {Object|null} options list of options\n   * @param {Object|null} selectors list of dom selectors\n   */\n  constructor(element, options, selectors) {\n    // Add parameters to global scope\n    this.Default = BoxRefresh.Default;\n    this.Selector = selectors || BoxRefresh.Selector;\n\n    this.element = element;\n\n    // Set options here\n    this.options = Utilities.grabOptions(this.Default, options, this.element);\n\n    if (this.options.source === '') {\n      throw new Error('Source url was not defined. Please specify a url in your BoxRefresh source option.');\n    }\n\n    this.setUpListeners();\n    this.load();\n  }\n\n  /**\n   * Bind listener on refresh trigger\n   */\n  setUpListeners() {\n    const trigger = this.element.querySelector(this.options.trigger);\n    trigger.addEventListener(\n      'click',\n      (e) => {\n        e.preventDefault();\n        this.load();\n      },\n    );\n  }\n\n  /**\n   * Load Content\n   */\n  load() {\n    // Add loading overlay\n    if (this.options.showOverlay) {\n      this.addOverlay();\n    }\n\n    // Try to convert string to object – for headers/param definition\n    const stringToObj = (s) => {\n      const obj = (typeof s === 'string') ? JSON.parse(s) : s;\n      return obj;\n    };\n\n    // Declare method for http callout\n    const httpRequest = (resolve, reject) => {\n      // Create param string\n      let params = '?';\n      this.options.params = stringToObj(this.options.params);\n      Object.keys(this.options.params).map((param) => {\n        params = `${params}${param}=${this.options.params[param]}&`;\n        return params;\n      });\n      params = params.substring(0, params.length - 1);\n\n      // HTTP Request\n      this.xhr = new XMLHttpRequest();\n      this.xhr.open('GET', `${this.options.source}${params}`);\n\n      // Add headers\n      this.options.headers = stringToObj(this.options.headers);\n      Object.keys(this.options.headers).map(header =>\n        this.xhr.setRequestHeader(header, this.options.headers[header]));\n\n      this.xhr.onload = () => {\n        if (this.xhr.status >= 200 && this.xhr.status < 300) {\n          resolve(this.xhr.response);\n        } else {\n          reject(this.xhr.statusText);\n        }\n      };\n\n      this.xhr.onerror = () => reject(this.xhr.statusText);\n      this.xhr.send();\n    };\n\n    // Declare method for resolving of request\n    const httpResolve = (response) => {\n      if (typeof this.options.onLoadDone === 'string') {\n        window[this.options.onLoadDone](this, response);\n      } else {\n        this.options.onLoadDone.call(this, response);\n      }\n\n      // remove loading overlay if it was shown\n      if (this.options.showOverlay) {\n        this.removeOverlay();\n      }\n\n      if (this.options.loadInContent) {\n        this.element.querySelector(this.options.content).innerHTML = response;\n      }\n    };\n\n    /**\n     * Start with custom pre-callout method\n     */\n    const request = new Promise((resolve, reject) => {\n      if (typeof this.options.onLoadStart === 'string') {\n        window[this.options.onLoadStart](this, reject, resolve);\n      } else {\n        this.options.onLoadStart.call(this, reject, resolve);\n      }\n    });\n\n    /**\n     * Main HTTP Request here\n     */\n    request.then(() => new Promise((resolve, reject) => httpRequest(resolve, reject)))\n      /**\n       * Remove loading overlay and call post-callout method\n       */\n      .then(response => httpResolve(response))\n      .catch(response => httpResolve(response));\n  }\n\n  /**\n   * Add loading overlay to element\n   */\n  addOverlay() {\n    this.element.innerHTML += this.options.overlayTemplate;\n  }\n\n  /**\n   * Remove loading overlay\n   */\n  removeOverlay() {\n    const overlay = this.element.querySelector(this.Selector.overlay);\n    if (overlay) overlay.remove();\n    this.setUpListeners();\n  }\n}\n\n/**\n * Default Options\n * @type {Object}\n */\nBoxRefresh.Default = {\n  source: '',\n  params: {},\n  headers: {},\n  trigger: '.refresh-btn',\n  content: '.box-body',\n  loadInContent: true,\n  responseType: '',\n  showOverlay: true,\n  overlayTemplate: '<div class=\"overlay\"><div class=\"fa fa-refresh fa-spin\"></div></div>',\n  onLoadStart: (reject, resolve) => { resolve(); }, // pass as method name in data-attr\n  onLoadDone: response => response, // pass as method name in data-attr\n};\n\n/**\n * Selectors for query selections\n * @type {Object}\n */\nBoxRefresh.Selector = {\n  data: '[data-widget=\"box-refresh\"]',\n  overlay: '.overlay',\n};\n\nexport default BoxRefresh;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/AdminLite/build/js/src/BoxRefresh.js\n// module id = 4\n// module chunks = 0 1","/* global Velocity */\nimport Utilities from './Utilities';\n\n/* BoxWidget()\n * =========\n * Adds AJAX content control to a box.\n *\n * @author Josh Walwyn <me@joshwalwyn.com>\n *\n * Adapted from Admin LTE BoxWidget.js jQuery Plugin\n *\n * @Usage: new BoxWidget(element, options);\n *         or add [data-widget=\"box-refresh\"] to the box element\n *         Pass any option as data-option=\"value\"\n */\nclass BoxWidget {\n  /**\n   * Binds listeners onto sidebar elements\n   */\n  static bind() {\n    Array.prototype.forEach.call(\n      document.querySelectorAll(BoxWidget.Selector.data),\n      element => new BoxWidget(element),\n    );\n  }\n\n  /**\n   * Add event listeners to box buttons if exists\n   * @param {Object} element The main sidebar element\n   * @param {Object|null} options list of options\n   * @param {Object|null} classNames list of classnames\n   * @param {Object|null} selectors list of dom selectors\n   * @param {Object|null} events list of event names\n   */\n  constructor(element, options, classNames, selectors, events) {\n    // Add parameters to global scope\n    this.Default = BoxWidget.Default;\n    this.ClassName = classNames || BoxWidget.ClassName;\n    this.Selector = selectors || BoxWidget.Selector;\n    this.Event = events || BoxWidget.Event;\n    this.element = element;\n\n    // Set options here\n    this.options = Utilities.grabOptions(this.Default, options, this.element);\n\n    // bind listeners\n    this.setUpListeners();\n  }\n\n  /**\n   * Set up box widget button listeners\n   */\n  setUpListeners() {\n    // Bind Collapse Events\n    Array.prototype.forEach.call(\n      this.element.querySelectorAll(this.options.collapseTrigger),\n      (el) => {\n        el.addEventListener(\n          'click',\n          (e) => {\n            e.preventDefault();\n            this.toggle();\n          },\n        );\n      },\n    );\n\n    // Bind Remove Events\n    Array.prototype.forEach.call(\n      this.element.querySelectorAll(this.options.removeTrigger),\n      (el) => {\n        el.addEventListener(\n          'click',\n          (e) => {\n            e.preventDefault();\n            this.remove();\n          },\n        );\n      },\n    );\n  }\n\n  /**\n   * Toggle the collapse state of the box\n   */\n  toggle() {\n    const isOpen = !this.element.classList.contains(this.ClassName.collapsed);\n\n    if (isOpen) {\n      this.collapse();\n    } else {\n      this.expand();\n    }\n  }\n\n  /**\n   * Remove box\n   */\n  remove() {\n    // Slide whole element up to remove if velocity defined, else just hide\n    if (typeof Velocity === 'undefined') {\n      this.element.dispatchEvent(new CustomEvent(this.Event.removed));\n      this.element.remove();\n    } else {\n      Velocity(this.element, 'slideUp', {\n        easing: this.options.easing,\n        duration: this.options.animationSpeed,\n      }).then(() => {\n        this.element.dispatchEvent(new CustomEvent(this.Event.removed));\n        this.element.remove();\n      });\n    }\n  }\n\n  /**\n   * Collapse box by sliding up elements\n   */\n  collapse() {\n    // Change collapse icon(s) to show expanded icon\n    const collapseIcons = this.element.querySelectorAll(`.${this.options.collapseIcon}`);\n\n    Array.prototype.forEach.call(collapseIcons, (i) => {\n      i.classList.remove(this.options.collapseIcon);\n      i.classList.add(this.options.expandIcon);\n    });\n\n    // Determine whether to dispatch collapsed event\n    const dispatchEvent = (fireEvent) => {\n      if (fireEvent) {\n        this.element.dispatchEvent(new CustomEvent(this.Event.collapsed));\n      }\n    };\n\n    // Slide elements up\n    const slideUp = (element, fireEvent) => {\n      const boxElement = element;\n      if (boxElement) {\n        // Slide if velocity exists, otherwise just hide\n        if (typeof Velocity === 'undefined') {\n          boxElement.style.display = 'none';\n          dispatchEvent(fireEvent);\n        } else {\n          Velocity(boxElement, 'slideUp', {\n            easing: this.options.easing,\n            duration: this.options.animationSpeed,\n          }).then(() => {\n            dispatchEvent(fireEvent);\n          });\n        }\n      }\n    };\n\n    // Slide both body and footer\n    slideUp(this.element.querySelector(this.Selector.footer));\n    slideUp(this.element.querySelector(this.Selector.body), true);\n\n    // Add collapsed class after animation finished\n    setTimeout(\n      () => this.element.classList.add(this.ClassName.collapsed),\n      this.options.animationSpeed,\n    );\n  }\n\n  /**\n   * Expand box by sliding down elements\n   */\n  expand() {\n    // Change collapse icon(s) to show expanded icon\n    const collapseIcons = this.element.querySelectorAll(`.${this.options.expandIcon}`);\n\n    Array.prototype.forEach.call(collapseIcons, (i) => {\n      i.classList.remove(this.options.expandIcon);\n      i.classList.add(this.options.collapseIcon);\n    });\n\n    // Determine whether to dispatch expanded event\n    const dispatchEvent = (fireEvent) => {\n      if (fireEvent) {\n        this.element.dispatchEvent(new CustomEvent(this.Event.expanded));\n      }\n    };\n\n    // Slide elements up\n    const slideDown = (element, fireEvent) => {\n      const boxElement = element;\n      if (boxElement) {\n        // Slide if velocity exists, otherwise just show\n        if (typeof Velocity === 'undefined') {\n          boxElement.style.display = 'block';\n          dispatchEvent(fireEvent);\n        } else {\n          Velocity(element, 'slideDown', {\n            easing: this.options.easing,\n            duration: this.options.animationSpeed,\n          }).then(() => {\n            dispatchEvent(fireEvent);\n          });\n        }\n      }\n    };\n\n    // Slide both body and footer\n    slideDown(this.element.querySelector(this.Selector.footer));\n    slideDown(this.element.querySelector(this.Selector.body), true);\n\n    // Add collapsed class after animation finished\n    setTimeout(\n      () => this.element.classList.remove(this.ClassName.collapsed),\n      this.options.animationSpeed,\n    );\n  }\n}\n\n/**\n * Default Options\n * @type {Object}\n */\nBoxWidget.Default = {\n  animationSpeed: 500,\n  easing: 'easeInSine',\n  collapseTrigger: '[data-widget=\"collapse\"]',\n  removeTrigger: '[data-widget=\"remove\"]',\n  collapseIcon: 'fa-minus',\n  expandIcon: 'fa-plus',\n  removeIcon: 'fa-times',\n};\n\n/**\n * Selectors for query selections\n * @type {Object}\n */\nBoxWidget.Selector = {\n  data: '.box',\n  // collapsed: '.collapsed-box',\n  body: '.box-body',\n  footer: '.box-footer',\n  // tools: '.box-tools',\n};\n\n/**\n * DOM Class Names\n * @type {Object}\n */\nBoxWidget.ClassName = {\n  collapsed: 'collapsed-box',\n};\n\n/**\n * Custom Events\n * @type {Object}\n */\nBoxWidget.Event = {\n  collapsed: 'boxwidget_collapsed',\n  expanded: 'boxwidget_expanded',\n  removed: 'boxwidget_remove',\n};\n\nexport default BoxWidget;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/AdminLite/build/js/src/BoxWidget.js\n// module id = 5\n// module chunks = 0 1","import Utilities from './Utilities';\n\n/* ControlSidebar()\n * ===============\n * Toggles the state of the control sidebar\n *\n * @author Josh Walwyn <me@joshwalwyn.com>\n *\n * Adapted from Admin LTE ControlSidebar.js jQuery Plugin\n *\n * @Usage: new ControlSider(button, options);\n *         or add [data-toggle=\"control-sidebar\"] to the sidbar trigger/button\n *         Pass any option as data-option=\"value\"\n */\nclass ControlSidebar {\n  /**\n   * Binds listeners onto sidebar elements\n   */\n  static bind() {\n    const buttons = document.querySelectorAll(ControlSidebar.Selector.data);\n\n    if (!buttons) return;\n\n    Array.prototype.forEach.call(\n      buttons,\n      button => new ControlSidebar(button),\n    );\n  }\n\n  /**\n   * Opens existing active element(s) and calls method to bind\n   * click event listeners onto the sidebar itself\n   * @param {Object} button The main sidebar control trigger\n   * @param {Object|null} options list of options\n   * @param {Object|null} classNames list of classnames\n   * @param {Object|null} selectors list of dom selectors\n   * @param {Object|null} events list of event names\n   */\n  constructor(button, options, classNames, selectors, events) {\n    // Add parameters to global scope\n    this.Default = ControlSidebar.Default;\n    this.ClassName = classNames || ControlSidebar.ClassName;\n    this.Selector = selectors || ControlSidebar.Selector;\n    this.Event = events || ControlSidebar.Event;\n\n    this.element = document.querySelector(this.Selector.sidebar);\n\n    // Set options here\n    this.options = Utilities.grabOptions(this.Default, options, this.element);\n\n    // Get main page body element\n    this.body = document.querySelector('body');\n\n    // Toggle open/close\n    if (!button) return;\n    button.addEventListener(\n      'click',\n      (e) => {\n        e.preventDefault();\n        this.toggle();\n        this.fix();\n      },\n    );\n\n    window.addEventListener('resize', this.fix.bind(this));\n  }\n\n  /**\n   * Fix sidebar height\n   */\n  fix() {\n    if (this.body.classList.contains(this.ClassName.boxed)) {\n      const sbg = document.querySelector(this.Selector.bg);\n      const wrapper = document.querySelector(this.Selector.wrapper);\n\n      if (sbg && wrapper) {\n        sbg.style.position = 'absolute';\n        sbg.style.height = wrapper.innerHeight;\n      }\n    }\n  }\n\n  /**\n   * Toggle sidebar open/close\n   */\n  toggle() {\n    const sidebar = document.querySelector(this.Selector.sidebar);\n\n    if (!sidebar) return;\n\n    this.fix();\n\n    if (!sidebar.classList.contains(this.ClassName.open) &&\n        !this.body.classList.contains(this.ClassName.open)) {\n      this.expand();\n    } else {\n      this.collapse();\n    }\n  }\n\n  /**\n   * Open Sidebar\n   */\n  expand() {\n    if (!this.options.slide) {\n      this.body.classList.add(this.ClassName.open);\n    } else {\n      this.element.classList.add(this.ClassName.open);\n    }\n\n    this.element.dispatchEvent(new CustomEvent(this.Event.expanded));\n  }\n\n  /**\n   * Close Sidebr\n   */\n  collapse() {\n    this.body.classList.remove(this.ClassName.open);\n    this.element.classList.remove(this.ClassName.open);\n\n    this.element.dispatchEvent(new CustomEvent(this.Event.collapsed));\n  }\n}\n\n/**\n * Default Options\n * @type {Object}\n */\nControlSidebar.Default = {\n  slide: true,\n};\n\n/**\n * Selectors for query selections\n * @type {Object}\n */\nControlSidebar.Selector = {\n  data: '[data-toggle=\"control-sidebar\"]',\n  bg: '.control-sidebar-bg',\n  wrapper: '.wrapper',\n  sidebar: '.control-sidebar',\n};\n\n/**\n * DOM Class Names\n * @type {Object}\n */\nControlSidebar.ClassName = {\n  open: 'control-sidebar-open',\n  boxed: 'layout-boxed',\n};\n\n/**\n * Custom Events\n * @type {Object}\n */\nControlSidebar.Event = {\n  expanded: 'controlsidebar_expanded',\n  collapsed: 'controlsidebar_collapsed',\n};\n\nexport default ControlSidebar;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/AdminLite/build/js/src/ControlSidebar.js\n// module id = 6\n// module chunks = 0 1","/* DirectChat()\n * ===============\n * Toggles the state of the control sidebar\n *\n * @author Josh Walwyn <me@joshwalwyn.com>\n *\n * Adapted from Admin LTE DirectChat.js jQuery Plugin\n *\n * @Usage: new DirectChat(element, options)\n *         or add [data-widget=\"direct-chat\"] to the trigger\n */\nclass DirectChat {\n  /**\n   * Binds listeners onto sidebar elements\n   */\n  static bind() {\n    Array.prototype.forEach.call(\n      document.querySelectorAll(DirectChat.Selector.data),\n      element => new DirectChat(element),\n    );\n  }\n\n  /**\n   * Get options, call to set listeners\n   * @param {Object} element The main trigger element\n   * @param {Object|null} classNames list of classnames\n   * @param {Object|null} selectors list of dom selectors\n   */\n  constructor(element, classNames, selectors) {\n    // Add parameters to global scope\n    this.ClassName = classNames || DirectChat.ClassName;\n    this.Selector = selectors || DirectChat.Selector;\n\n    this.element = element;\n\n    this.setUpListener();\n  }\n\n  /**\n   * Set up event listeners\n   */\n  setUpListener() {\n    this.element.addEventListener(\n      'click',\n      (e) => {\n        this.toggle();\n        e.preventDefault();\n      },\n    );\n  }\n\n  /**\n   * Toggle overlay\n   */\n  toggle() {\n    const mainBox = this.element.closest(this.Selector.box);\n\n    if (mainBox) {\n      mainBox.classList.toggle(this.ClassName.open);\n    }\n  }\n}\n\n/**\n * Selectors for query selections\n * @type {Object}\n */\nDirectChat.Selector = {\n  data: '[data-widget=\"chat-pane-toggle\"]',\n  box: '.direct-chat',\n};\n\n/**\n * DOM Class Names\n * @type {Object}\n */\nDirectChat.ClassName = {\n  open: 'direct-chat-contacts-open',\n};\n\nexport default DirectChat;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/AdminLite/build/js/src/DirectChat.js\n// module id = 7\n// module chunks = 0 1","import Utilities from './Utilities';\nimport Tree from './Tree';\n\n/* Layout()\n * ========\n * Implements AdminLTE layout.\n * Fixes the layout height in case min-height fails.\n *\n * @author Josh Walwyn <me@joshwalwyn.com>\n *\n * Adapted from Admin LTE Layout.js jQuery Plugin\n *\n * @usage activated automatically upon window load.\n *        Configure any options by passing data-option=\"value\"\n *        to the body tag.\n */\nclass Layout {\n  /**\n   * Static method to initiate\n   */\n  static bind() {\n    new Layout();\n  }\n\n  /**\n   * Constructor\n   * @param {Object|null} options list of options\n   * @param {Object|null} classNames list of classnames\n   * @param {Object|null} selectors list of dom selectors\n   */\n  constructor(options, classNames, selectors) {\n    // set defaults\n    this.Default = Layout.Default;\n    this.Selector = selectors || Layout.Selector;\n    this.ClassName = classNames || Layout.ClassName;\n    this.blindedResize = false; // Bind layout methods to resizing\n    // get body element from DOM\n    this.element = document.querySelector('body');\n\n    // Set options here\n    this.options = Utilities.grabOptions(this.Default, options, this.element);\n\n    this.activate();\n  }\n\n  /**\n   * Actives layout methods\n   */\n  activate() {\n    this.fixLayout();\n\n    if (this.options.transitionEnabled) {\n      this.element.classList.remove(this.ClassName.holdTransition);\n    }\n\n    // Reset main wrapper elements\n    if (this.options.resetHeight) {\n      const elements = document.querySelectorAll(this.Selector.heightReset);\n\n      Array.prototype.forEach.call(elements, (el) => {\n        const elC = el;\n        elC.style.height = 'auto';\n        elC.style.minHeight = '100%';\n      });\n    }\n\n    // Resize when window is resized\n    if (!this.bindedResize) {\n      window.addEventListener('resize', this.fixLayout.bind(this));\n\n      const elLogo = document.querySelector(this.Selector.logo);\n      const elSidebar = document.querySelector(this.ClassName.sidebar);\n\n      if (elLogo) elLogo.addEventListener('transitionend', this.fixLayout.bind(this));\n      if (elSidebar) elSidebar.addEventListener('transitionend', this.fixLayout.bind(this));\n\n      this.bindedResize = true;\n    }\n\n    // If sidebar menu has expanded options, ensure layout is recalculated\n    const sidebarMenu = document.querySelector(this.Selector.sidebarMenu);\n\n    if (sidebarMenu) {\n      sidebarMenu.addEventListener(Tree.Event.expanded, this.fixLayout.bind(this));\n      sidebarMenu.addEventListener(Tree.Event.collapsed, this.fixLayout.bind(this));\n    }\n  }\n\n  /**\n   * Fix content height so it fills the page\n   */\n  fix() {\n    // Get all elements\n    const elFooter = document.querySelector(this.Selector.mainFooter);\n    const elSidebar = document.querySelector(this.Selector.sidebar);\n    const elHeader = document.querySelector(this.Selector.mainHeader);\n    const elWrapper = document.querySelector(this.Selector.contentWrapper);\n\n    // We need a wrapper, otherwise lets just bail now\n    if (!elWrapper) {\n      return;\n    }\n\n    // Remove overflow from .wrapper if layout-boxed exists\n    const boxedWrapper = document.querySelector(`${this.Selector.layoutBoxed} > ${this.Selector.wrapper}`);\n    if (boxedWrapper) {\n      boxedWrapper.style.overflow = 'hidden';\n    }\n\n    // Get values for height, or set defaults\n    const footerHeight = (elFooter) ? elFooter.offsetHeight : 0;\n    const sidebarHeight = (elSidebar) ? elSidebar.offsetHeight : 0;\n    const windowHeight = window.innerHeight;\n    const neg = (elHeader) ? elHeader.offsetHeight + footerHeight : footerHeight;\n\n    let postSetHeight;\n\n    // Set the min-height of the content and sidebar based on\n    // the height of the document.\n    if (document.querySelector('body').classList.contains(this.ClassName.fixed)) {\n      elWrapper.style.minHeight = `${windowHeight - footerHeight}px`;\n    } else {\n      // Set height of page\n      if (windowHeight >= sidebarHeight) {\n        postSetHeight = windowHeight - neg;\n        elWrapper.style.minHeight = `${postSetHeight}px`;\n      } else {\n        postSetHeight = sidebarHeight;\n        elWrapper.style.minHeight = `${postSetHeight}px`;\n      }\n\n      // Fix for the control sidebar height\n      const controlSidebar = document.querySelector(this.Selector.controlSidebar);\n      if (controlSidebar) {\n        if (controlSidebar.clientHeight > postSetHeight) {\n          elWrapper.style.minHeight = `${controlSidebar.clientHeight}px`;\n        }\n      }\n    }\n  }\n\n  /**\n   * Fix Sidebar for scrolling on fixed layout\n   */\n  fixSidebar() {\n    const elHeader = document.querySelector(this.Selector.mainHeader);\n    const elSidebar = document.querySelector(this.Selector.sidebar);\n\n    if (!elSidebar) return;\n\n    // Make sure the body tag has the .fixed class otherwise return\n    if (!this.element.classList.contains(this.ClassName.fixed)) {\n      return;\n    }\n\n    // Fix for scrolling here\n    const headerHeight = (elHeader) ? elHeader.offsetHeight : 0;\n    const windowHeight = window.innerHeight;\n\n    elSidebar.style.height = `${windowHeight - headerHeight}px`;\n    elSidebar.style.overflowY = 'scroll';\n  }\n\n  /**\n   * Proxy for calling both fix methods\n   */\n  fixLayout() {\n    this.fix();\n    this.fixSidebar();\n  }\n}\n\n/**\n * Default Options\n * @type {Object}\n */\nLayout.Default = {\n  resetHeight: true,\n  transitionEnabled: true,\n};\n\n/**\n * Selectors for query selections\n * @type {Object}\n */\nLayout.Selector = {\n  heightReset: 'body, html, .wrapper',\n  wrapper: '.wrapper',\n  sidebar: '.sidebar',\n  logo: '.main-header .logo',\n  layoutBoxed: '.layout-boxed',\n  sidebarMenu: '.sidebar-menu',\n  mainFooter: '.main-footer',\n  mainHeader: '.main-header',\n  contentWrapper: '.content-wrapper',\n  controlSidebar: '.control-sidebar',\n};\n\n/**\n * DOM Class Names\n * @type {Object}\n */\nLayout.ClassName = {\n  holdTransition: 'hold-transition',\n  fixed: 'fixed',\n};\n\nexport default Layout;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/AdminLite/build/js/src/Layout.js\n// module id = 8\n// module chunks = 0 1","import Utilities from './Utilities';\n\n/* PushMenu()\n * ==========\n * Adds the push menu functionality to the sidebar.\n *\n * @author Josh Walwyn <me@joshwalwyn.com>\n *\n * Adapted from Admin LTE PushMenu.js jQuery Plugin\n *\n * @Usage: new PushMenu(element, options)\n *         Add [data-widget=\"push-menu\"] to the ul element\n *         Pass any option as data-option-name=\"value\"\n */\nclass PushMenu {\n  /**\n   * Binds listeners onto sidebar elements\n   */\n  static bind() {\n    Array.prototype.forEach.call(\n      document.querySelectorAll(PushMenu.Selector.button),\n      button => new PushMenu(button),\n    );\n  }\n\n  /**\n   * Binds Listeners to DOM\n   * @param {Object} element The main sidebar element\n   * @param {Object|null} options list of options\n   * @param {Object|null} classNames list of classnames\n   * @param {Object|null} selectors list of dom selectors\n   */\n  constructor(element, options, classNames, selectors) {\n    // Add parameters to global scope\n    this.Default = PushMenu.Default;\n    this.ClassName = classNames || PushMenu.ClassName;\n    this.Selector = selectors || PushMenu.Selector;\n\n    this.element = element;\n\n    // And  Window Width\n    this.windowWidth = window.innerWidth;\n\n    // Set options here\n    this.options = Utilities.grabOptions(this.Default, options, this.element);\n\n    // Get main page body element\n    this.body = document.querySelector('body');\n\n    if (!element) {\n      return;\n    }\n\n    // Add Listeners to expand/collapse sidebar on hover\n    if (this.options.expandOnHover ||\n        (this.body.classList.contains(this.ClassName.mini) &&\n         this.body.classList.contains(this.ClassName.layoutFixed))) {\n      this.expandOnHover();\n      this.body.classList.add(this.ClassName.expandFeature);\n    }\n\n    // Enable hide menu when clicking on the content-wrapper on small screens\n    this.body.getElementsByClassName(this.ClassName.contentWrapper)[0]\n      .addEventListener(\n        'click',\n        () => {\n          if (this.windowWidth <= this.options.collapseScreenSize &&\n            this.body.classList.contains(this.ClassName.open)) {\n            this.close();\n          }\n        },\n      );\n\n    // Fix for android devices\n    const searchInput = this.body.querySelector(this.Selector.searchInput);\n\n    if (searchInput) {\n      searchInput.addEventListener(\n        'click',\n        (e) => {\n          e.stopPropagation();\n        },\n      );\n    }\n\n    // Bind functionality to close/open sidebar\n    this.setUpListeners();\n  }\n\n  /**\n   * Binds an event listener to each parent menu element\n   */\n  setUpListeners() {\n    this.element.addEventListener('click', (event) => {\n      // And contextual Window Width\n      this.windowWidth = window.innerWidth;\n\n      event.preventDefault();\n      this.toggle();\n    });\n  }\n\n  /**\n   * Toggle sidebar open/close\n   */\n  toggle() {\n    let isOpen = !this.body.classList.contains(this.ClassName.collapsed);\n\n    if (this.windowWidth <= this.options.collapseScreenSize) {\n      isOpen = this.body.classList.contains(this.ClassName.open);\n    }\n\n    if (!isOpen) {\n      this.open();\n    } else {\n      this.close();\n    }\n  }\n\n  /**\n   * Open the sidebar\n   */\n  open() {\n    if (this.windowWidth > this.options.collapseScreenSize) {\n      this.body.classList.remove(this.ClassName.collapsed);\n    } else {\n      this.body.classList.add(this.ClassName.open);\n    }\n  }\n\n  /**\n   * Close the sidebar\n   */\n  close() {\n    if (this.windowWidth > this.options.collapseScreenSize) {\n      this.body.classList.remove(this.ClassName.expanded);\n      this.body.classList.add(this.ClassName.collapsed);\n    } else {\n      this.body.classList.remove(this.ClassName.open);\n      this.body.classList.remove(this.ClassName.collapsed);\n    }\n  }\n\n  /**\n   * Expand with time delay via mouseover hover\n   */\n  expand() {\n    window.setTimeout(() => {\n      this.body.classList.remove(this.ClassName.collapsed);\n      this.body.classList.add(this.ClassName.expanded);\n    }, this.options.expandTransitionDelay);\n  }\n\n  /**\n   * Collapse with time delay via mouseout hover\n   */\n  collapse() {\n    window.setTimeout(() => {\n      this.body.classList.remove(this.ClassName.expanded);\n      this.body.classList.add(this.ClassName.collapsed);\n    }, this.options.expandTransitionDelay);\n  }\n\n  /**\n   * Bind mouseover and mouseleave events to colapse/expand sidebar\n   */\n  expandOnHover() {\n    Array.prototype.forEach.call(\n      document.getElementsByClassName(this.ClassName.mainSidebar),\n      (context) => {\n        context.addEventListener('mouseover', () => {\n          // Handle Expansion\n          if (this.body.classList.contains(this.ClassName.mini) &&\n              this.body.classList.contains(this.ClassName.collapsed) &&\n              this.windowWidth > this.options.collapseScreenSize) {\n            this.expand();\n          }\n        });\n\n        // handle Close the sidebar\n        context.addEventListener('mouseleave', () => {\n          if (this.body.classList.contains(this.ClassName.expanded)) {\n            this.collapse();\n          }\n        });\n      },\n    );\n  }\n}\n\n/**\n * Default Options\n * @type {Object}\n */\nPushMenu.Default = {\n  collapseScreenSize: 767,\n  expandOnHover: false,\n  expandTransitionDelay: 0,\n};\n\n/**\n * Selectors for query selections\n * @type {Object}\n */\nPushMenu.Selector = {\n  button: '[data-toggle=\"push-menu\"]',\n  mainLogo: '.main-header .logo',\n  searchInput: '.sidebar-form .form-control',\n};\n\n/**\n * DOM Class NAmes\n * @type {Object}\n */\nPushMenu.ClassName = {\n  collapsed: 'sidebar-collapse',\n  open: 'sidebar-open',\n  mainSidebar: 'main-sidebar',\n  mini: 'sidebar-mini',\n  contentWrapper: 'content-wrapper',\n  layoutFixed: 'fixed',\n  expanded: 'sidebar-expanded-on-hover',\n  expandFeature: 'sidebar-mini-expand-feature',\n};\n\nexport default PushMenu;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/AdminLite/build/js/src/PushMenu.js\n// module id = 9\n// module chunks = 0 1","import Utilities from './Utilities';\n\n/* TodoList()\n * =========\n * Converts a list into a todoList.\n *\n * @author Josh Walwyn <me@joshwalwyn.com>\n *\n * Adapted from Admin LTE TodoList.js jQuery Plugin\n *\n * @Usage: new TodoList(element, options)\n *         or add [data-widget=\"todo-list\"] to the ul element\n *         Pass any option as data-option=\"value\"\n */\nclass TodoList {\n  /**\n   * Binds listeners onto sidebar elements\n   */\n  static bind() {\n    Array.prototype.forEach.call(\n      document.querySelectorAll(TodoList.Selector.data),\n      element => new TodoList(element),\n    );\n  }\n\n  /**\n   * Binds Listeners to DOM\n   * @param {Object} element The main checkbox list element\n   * @param {Object|null} options list of options\n   * @param {Object|null} classNames list of classnames\n   * @param {Object|null} selectors list of dom selectors\n   */\n  constructor(element, options, classNames, selectors) {\n    // Add parameters to global scope\n    this.Default = TodoList.Default;\n    this.Selector = selectors || TodoList.Selector;\n    this.ClassName = classNames || TodoList.ClassName;\n\n    this.element = element;\n\n    // Set options here\n    this.options = Utilities.grabOptions(this.Default, options, this.element);\n\n    this.setUpListeners();\n  }\n\n  /**\n   * Set up event listeners\n   */\n  setUpListeners() {\n    Array.prototype.forEach.call(\n      this.element.querySelectorAll('input[type=checkbox]'),\n      (el) => {\n        el.addEventListener(\n          'change',\n          () => this.toggle(el),\n        );\n      },\n    );\n  }\n\n  /**\n   * Handle toggling of checkbox\n   * @param {Object} checkbox The Checkbox element\n   */\n  toggle(checkbox) {\n    const listElement = checkbox.closest('li');\n    listElement.classList.toggle(this.ClassName.done);\n\n    // Handle checked\n    if (checkbox.checked) {\n      this.check(checkbox);\n    } else {\n      this.uncheck(checkbox);\n    }\n  }\n\n  /**\n   * Handle check - call custom method if set\n   * @param {Object} checkbox The Checkbox element\n   */\n  check(checkbox) {\n    if (typeof this.options.onCheck === 'string') {\n      window[this.options.onCheck](checkbox);\n    } else {\n      this.options.onCheck.call(checkbox);\n    }\n  }\n\n  /**\n   * Handle uncheck - call custom method if set\n   * @param {Object} checkbox The Checkbox element\n   */\n  uncheck(checkbox) {\n    if (typeof this.options.onUncheck === 'string') {\n      window[this.options.onUncheck](checkbox);\n    } else {\n      this.options.onUncheck.call(checkbox);\n    }\n  }\n}\n\n/**\n * Default Options\n * @type {Object}\n */\nTodoList.Default = {\n  onCheck: item => item, // pass as method name in data-attr\n  onUncheck: item => item, // pass as method name in data-attr\n};\n\n/**\n * Selectors for query selections\n * @type {Object}\n */\nTodoList.Selector = {\n  data: '[data-widget=\"todo-list\"]',\n};\n\n/**\n * DOM Class Names\n * @type {Object}\n */\nTodoList.ClassName = {\n  done: 'done',\n};\n\nexport default TodoList;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/AdminLite/build/js/src/TodoList.js\n// module id = 10\n// module chunks = 0 1"],"sourceRoot":""}